use anyhow::Result;
use crate::core::common::tlv::tlv_error::TlvError;


/// Contains all possible value types for a [TlvTag].
#[derive(Copy, Clone, Debug, Eq, PartialEq)]
pub enum TlvValueType {
    HexString,
    HexStringToHash,
    Utf8String,
    Uint8,
    Uint16,
    Uint32,
    BoolValue,
    ByteArray,
    EllipticCurve,
    DateTime,
    ProductMask,
    SettingsMask,
    Status,
    SigningMethod,
    InteractionMode,
    FileDataMode,
    DerivationPath,
    BackupStatus
}

/// Contains all TLV tags, with their code and descriptive name.
#[derive(Copy, Clone, Debug, Eq, PartialEq)]
pub enum TlvTag {
    Unknown = 0x00,
    CardId = 0x01,
    Status = 0x02,
    CardPublicKey = 0x03,
    CardSignature = 0x04,
    CurveId = 0x05,
    HashAlgID = 0x06,
    SigningMethod = 0x07,
    MaxSignatures = 0x08,
    PauseBeforePin2 = 0x09,
    SettingsMask = 0x0A,
    CardData = 0x0C,
    NdefData = 0x0D,
    CreateWalletAtPersonalize = 0x0E,
    Health = 0x0F,
    Pin = 0x10,
    Pin2 = 0x11,
    NewPin = 0x12,
    NewPin2 = 0x13,
    NewPinHash = 0x14,
    NewPin2Hash = 0x15,
    Challenge = 0x16,
    Salt = 0x17,
    ValidationCounter = 0x18,
    Cvc = 0x19,
    SessionKeyA = 0x1A,
    SessionKeyB = 0x1B,
    Pause = 0x1C,
    NewPin3 = 0x1E,
    CrExKey = 0x1F,
    Uid = 0x0B,
    ManufacturerName = 0x20,
    CardIDManufacturerSignature = 0x86,
    IssuerPublicKey = 0x30,
    IssuerTransactionPublicKey = 0x31,
    IssuerData = 0x32,
    IssuerDataSignature = 0x33,
    IssuerTransactionSignature = 0x34,
    IssuerDataCounter = 0x35,
    AcquirerPublicKey = 0x37,
    Size = 0x25,
    Offset = 0x24,
    IsActivated = 0x3A,
    ActivationSeed = 0x3B,
    ResetPin = 0x36,
    CodePageAddress = 0x40,
    CodePageCount = 0x41,
    CodeHash = 0x42,
    TransactionOutHash = 0x50,
    TransactionOutHashSize = 0x51,
    TransactionOutRaw = 0x52,
    Certificate = 0x55,
    PinIsDefault = 0x5A,
    Pin2IsDefault = 0x59,
    WalletPublicKey = 0x60,
    WalletSignature = 0x61,
    WalletRemainingSignatures = 0x62,
    WalletSignedHashes = 0x63,
    CheckWalletCounter = 0x64,
    WalletIndex = 0x65,
    WalletsCount = 0x66,
    WalletData = 0x67,
    CardWallet = 0x68,
    WalletHDPath = 0x6A,
    WalletHDChain = 0x6B,
    Firmware = 0x80,
    BatchId = 0x81,
    ManufactureDateTime = 0x82,
    IssuerName = 0x83,
    BlockchainName = 0x84,
    ManufacturerPublicKey = 0x85,
    ProductMask = 0x8A,
    PaymentFlowVersion = 0x54,
    TokenSymbol = 0xA0,
    TokenContractAddress = 0xA1,
    TokenDecimal = 0xA2,
    TokenName = 0xA3,
    Denomination = 0xC0,
    ValidatedBalance = 0xC1,
    LastSignDate = 0xC2,
    DenominationText = 0xC3,
    TerminalIsLinked = 0x58,
    TerminalPublicKey = 0x5C,
    TerminalTransactionSignature = 0x57,
    UserData = 0x2A,
    UserProtectedData = 0x2B,
    UserCounter = 0x2C,
    UserProtectedCounter = 0x2D,
    WriteFileMode = 0x23,
    FileIndex = 0x26,
    FileSettings = 0x27,
    FileTypeName = 0x70,
    FileData = 0x71,
    FileSignature = 0x73,
    FileCounter = 0x74,
    FileOwnerIndex = 0x75,
    BackupStatus = 0xD0,
    BackupCount = 0xD1,
    PrimaryCardLinkingKey = 0xD2,
    BackupCardLinkingKey = 0xD3,
    BackupCardLink = 0xD4,
    BackupAttestSignature = 0xD5
}


impl TryFrom<u8> for TlvTag {
    type Error = TlvError;

    fn try_from(code: u8) -> Result<Self, Self::Error> {
        match code {
            0x00 => Ok( Self::Unknown ),
            0x01 => Ok( Self::CardId ),
            0x02 => Ok( Self::Status ),
            0x03 => Ok( Self::CardPublicKey ),
            0x04 => Ok( Self::CardSignature ),
            0x05 => Ok( Self::CurveId ),
            0x06 => Ok( Self::HashAlgID ),
            0x07 => Ok( Self::SigningMethod ),
            0x08 => Ok( Self::MaxSignatures ),
            0x09 => Ok( Self::PauseBeforePin2 ),
            0x0A => Ok( Self::SettingsMask ),
            0x0C => Ok( Self::CardData ),
            0x0D => Ok( Self::NdefData ),
            0x0E => Ok( Self::CreateWalletAtPersonalize ),
            0x0F => Ok( Self::Health ),
            0x10 => Ok( Self::Pin ),
            0x11 => Ok( Self::Pin2 ),
            0x12 => Ok( Self::NewPin ),
            0x13 => Ok( Self::NewPin2 ),
            0x14 => Ok( Self::NewPinHash ),
            0x15 => Ok( Self::NewPin2Hash ),
            0x16 => Ok( Self::Challenge ),
            0x17 => Ok( Self::Salt ),
            0x18 => Ok( Self::ValidationCounter ),
            0x19 => Ok( Self::Cvc ),
            0x1A => Ok( Self::SessionKeyA ),
            0x1B => Ok( Self::SessionKeyB ),
            0x1C => Ok( Self::Pause ),
            0x1E => Ok( Self::NewPin3 ),
            0x1F => Ok( Self::CrExKey ),
            0x0B => Ok( Self::Uid ),
            0x20 => Ok( Self::ManufacturerName ),
            0x86 => Ok( Self::CardIDManufacturerSignature ),
            0x30 => Ok( Self::IssuerPublicKey ),
            0x31 => Ok( Self::IssuerTransactionPublicKey ),
            0x32 => Ok( Self::IssuerData ),
            0x33 => Ok( Self::IssuerDataSignature ),
            0x34 => Ok( Self::IssuerTransactionSignature ),
            0x35 => Ok( Self::IssuerDataCounter ),
            0x37 => Ok( Self::AcquirerPublicKey ),
            0x25 => Ok( Self::Size ),
            0x24 => Ok( Self::Offset ),
            0x3A => Ok( Self::IsActivated ),
            0x3B => Ok( Self::ActivationSeed ),
            0x36 => Ok( Self::ResetPin ),
            0x40 => Ok( Self::CodePageAddress ),
            0x41 => Ok( Self::CodePageCount ),
            0x42 => Ok( Self::CodeHash ),
            0x50 => Ok( Self::TransactionOutHash ),
            0x51 => Ok( Self::TransactionOutHashSize ),
            0x52 => Ok( Self::TransactionOutRaw ),
            0x55 => Ok( Self::Certificate ),
            0x5A => Ok( Self::PinIsDefault ),
            0x59 => Ok( Self::Pin2IsDefault ),
            0x60 => Ok( Self::WalletPublicKey ),
            0x61 => Ok( Self::WalletSignature ),
            0x62 => Ok( Self::WalletRemainingSignatures ),
            0x63 => Ok( Self::WalletSignedHashes ),
            0x64 => Ok( Self::CheckWalletCounter ),
            0x65 => Ok( Self::WalletIndex ),
            0x66 => Ok( Self::WalletsCount ),
            0x67 => Ok( Self::WalletData ),
            0x68 => Ok( Self::CardWallet ),
            0x6A => Ok( Self::WalletHDPath ),
            0x6B => Ok( Self::WalletHDChain ),
            0x80 => Ok( Self::Firmware ),
            0x81 => Ok( Self::BatchId ),
            0x82 => Ok( Self::ManufactureDateTime ),
            0x83 => Ok( Self::IssuerName ),
            0x84 => Ok( Self::BlockchainName ),
            0x85 => Ok( Self::ManufacturerPublicKey ),
            0x8A => Ok( Self::ProductMask ),
            0x54 => Ok( Self::PaymentFlowVersion ),
            0xA0 => Ok( Self::TokenSymbol ),
            0xA1 => Ok( Self::TokenContractAddress ),
            0xA2 => Ok( Self::TokenDecimal ),
            0xA3 => Ok( Self::TokenName ),
            0xC0 => Ok( Self::Denomination ),
            0xC1 => Ok( Self::ValidatedBalance ),
            0xC2 => Ok( Self::LastSignDate ),
            0xC3 => Ok( Self::DenominationText ),
            0x58 => Ok( Self::TerminalIsLinked ),
            0x5C => Ok( Self::TerminalPublicKey ),
            0x57 => Ok( Self::TerminalTransactionSignature ),
            0x2A => Ok( Self::UserData ),
            0x2B => Ok( Self::UserProtectedData ),
            0x2C => Ok( Self::UserCounter ),
            0x2D => Ok( Self::UserProtectedCounter ),
            0x23 => Ok( Self::WriteFileMode ),
            0x26 => Ok( Self::FileIndex ),
            0x27 => Ok( Self::FileSettings ),
            0x70 => Ok( Self::FileTypeName ),
            0x71 => Ok( Self::FileData ),
            0x73 => Ok( Self::FileSignature ),
            0x74 => Ok( Self::FileCounter ),
            0x75 => Ok( Self::FileOwnerIndex ),
            0xD0 => Ok( Self::BackupStatus ),
            0xD1 => Ok( Self::BackupCount ),
            0xD2 => Ok( Self::PrimaryCardLinkingKey ),
            0xD3 => Ok( Self::BackupCardLinkingKey ),
            0xD4 => Ok( Self::BackupCardLink ),
            0xD5 => Ok( Self::BackupAttestSignature ),
            _ => { Err( TlvError::TlvTagValueError { value: code }.into() ) }
        }
    }
}


impl TlvTag {
    pub fn value_type(self) -> TlvValueType {
        match self {
            TlvTag::CardId => TlvValueType::HexString,
            TlvTag::Status => TlvValueType::Status,
            TlvTag::CurveId => TlvValueType::EllipticCurve,
            TlvTag::SigningMethod => TlvValueType::SigningMethod,
            TlvTag::MaxSignatures => TlvValueType::Uint32,
            TlvTag::PauseBeforePin2 => TlvValueType::Uint16,
            TlvTag::SettingsMask => TlvValueType::SettingsMask,
            TlvTag::CreateWalletAtPersonalize => TlvValueType::BoolValue,
            TlvTag::Health => TlvValueType::Uint16,
            TlvTag::ManufacturerName => TlvValueType::Utf8String,
            TlvTag::IssuerDataCounter => TlvValueType::Uint32,
            TlvTag::Size => TlvValueType::Uint16,
            TlvTag::Offset => TlvValueType::Uint16,
            TlvTag::IsActivated => TlvValueType::BoolValue,
            TlvTag::PinIsDefault => TlvValueType::BoolValue,
            TlvTag::Pin2IsDefault => TlvValueType::BoolValue,
            TlvTag::WalletRemainingSignatures => TlvValueType::Uint16,
            TlvTag::WalletSignedHashes => TlvValueType::Uint16,
            TlvTag::CheckWalletCounter => TlvValueType::Uint8,
            TlvTag::WalletIndex => TlvValueType::Uint8,
            TlvTag::WalletsCount => TlvValueType::Uint8,
            TlvTag::WalletHDPath => TlvValueType::DerivationPath,
            TlvTag::Firmware => TlvValueType::Utf8String,
            TlvTag::BatchId => TlvValueType::HexString,
            TlvTag::ManufactureDateTime => TlvValueType::DateTime,
            TlvTag::IssuerName => TlvValueType::Utf8String,
            TlvTag::BlockchainName => TlvValueType::Utf8String,
            TlvTag::ProductMask => TlvValueType::ProductMask,
            TlvTag::TokenSymbol => TlvValueType::Utf8String,
            TlvTag::TokenContractAddress => TlvValueType::Utf8String,
            TlvTag::TokenDecimal => TlvValueType::Uint16,
            TlvTag::TokenName => TlvValueType::Utf8String,
            TlvTag::TerminalIsLinked => TlvValueType::BoolValue,
            TlvTag::UserCounter => TlvValueType::Uint32,
            TlvTag::UserProtectedCounter => TlvValueType::Uint32,
            TlvTag::WriteFileMode => TlvValueType::FileDataMode,
            TlvTag::FileIndex => TlvValueType::Uint8,
            TlvTag::FileTypeName => TlvValueType::Utf8String,
            TlvTag::FileCounter => TlvValueType::Uint8,
            TlvTag::FileOwnerIndex => TlvValueType::Uint8,
            TlvTag::BackupStatus => TlvValueType::BackupStatus,
            TlvTag::BackupCount => TlvValueType::Uint8,
            _ => return TlvValueType::ByteArray,
        }
    }
}


#[cfg(test)]
mod tests {
    use crate::core::common::tlv::tlv_error::TlvError;
    use crate::core::common::tlv::tlv_tag::{TlvTag, TlvValueType };

    #[test]
    fn test_value_type() {
        assert_eq!( TlvTag::CardId.value_type(), TlvValueType::HexString )
    }

    #[test]
    fn test_from() {
        assert_eq!( TlvTag::try_from(0x73).unwrap(), TlvTag::FileSignature );
        assert!( TlvTag::try_from(u8::MAX).is_err() )
    }
}
